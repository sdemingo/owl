#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Agregador de enlaces para usar sobre terminal en un servidor de usuarios
# Por sdemingo
#
#       sdemingo [en] texto-plano.xyz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.


# próximo:
# - permitir etiquetar enlaces (con una marca aparte en el log)
# - permitir listar por usuario, etiquetas, ...
# - comando para mostrar estadísticas (de usuarios, enlaces, votos, comentarios, etc.)
# - permitir exportar a HTML
# - busquedas con criterios (por usuario, por fechas, no leídos, ...)


import sys
import os
import hashlib
from datetime import datetime as dt
import json

OWL_LOGFILE=".owl.log"
OWL_CONFIGFILE=".owl.config"
USR_DIR="/home"
HTTP_BROWSER="w3m"
GEMINI_BROWSER="amfora"
LINKS_PER_PAGE=10
MAX_COMMENT_SIZE=500
VERSION="1.0"
WELCOME_MESSAGE=r"""
                  /^----^\
                  | 0  0 |
    Whoo!!        |  \/  |
                  /       \
      Whoo!!     |     |;;;|
                 |     |;;;|          \   \
                 |      \;;|           \\//
                  \       \|           / /
 ------------------(((--(((------------\ \----------,
  --  ___  ----  __ ---   ____   ---- _____ -- __ - \
  __ --   __ -- _____ --- __  ----  ___  ---- __ -- /
 ---------------/ /---------------\  \--------------`
                \ \               / /
                 //\             //
                 \               \\
                                 /

Bienvenido a Owl
"""



sorted_marks=[]
link_list={}
log_errors=[]
user=os.getenv("USER")
userhome=os.getenv("HOME")

class fontStyle:
    BOLD = '\033[1m'
    END = '\033[0m'

##
##  Funciones asociadas a comandos
##

def add(args):
    """
    Comando para añadir enlaces
    """
    stamp=dt.timestamp(dt.today())
    url=str(input("URL: ")).strip()
    title=str(input("Título: "))
    key=hashlib.md5((url+str(stamp)+user).encode()).hexdigest()
    if (not url.startswith("http://")) and (not url.startswith("gemini://")):
        url="http://"+url
    line="%f;add;%s;%s;%s" %(stamp,key,url,title)
    addMark(line)
    link=Link(user,[stamp,"add",key,url,title])
    sorted_marks.append(link)
    link_list[link.key]=link


def listl(args):
    """
    Comando para listar enlaces
    """
    c=1
    for m in sorted_marks:
        print ("[%d] %s"%(c,m.stringHeader()),end="")
        c+=1
        if (c % LINKS_PER_PAGE == 0):
            input("\tPulsa una tecla para seguir o 'q' para abortar ...\n")


def openbrowser(args):
    """
    Comando para abrir enlaces en el browser apropiado
    """
    if (len(args)<1):
        print ("Error: Faltan argumentos")
        return
    try:
        number=int(args[0])
    except:
        print ("Error: Id incorrecto")
        return
    if ((number>0) and (number <= len(sorted_marks))):
        url = sorted_marks[number-1].url
        key=sorted_marks[number-1].key
        if url.startswith("gemini://"):
            os.system(GEMINI_BROWSER+" "+sorted_marks[number-1].url)
        else:
            os.system(HTTP_BROWSER+" "+sorted_marks[number-1].url)

        if (user not in sorted_marks[number-1].views):
            stamp=dt.timestamp(dt.today())
            addMark("%f;open;%s" %(stamp,key))
            link=link_list[key]
            link.addViewer(user)
    else:
        print ("Error: Id incorrecto")


def vote(args):
    """
    Comando para votar enlaces
    """
    if (len(args)<1):
        print ("Error: Falta id del enlace")
        return
    try:
        number=int(args[0])
    except:
        print ("Error: Id incorrecto")
        return
    if ((number>0) and (number <= len(sorted_marks))):
        key=sorted_marks[number-1].key
        if (user in sorted_marks[number-1].ups):
            print ("Ya votaste este enlace")
        else:
            stamp=dt.timestamp(dt.today())
            addMark("%f;vote;%s" %(stamp,key))
            link=link_list[key]
            link.addVoteFrom(user)
    else:
        print ("Error: Id incorrecto")


def vhelp(args):
    helpmsg='''
    - list:     Lista enlaces encontrados.
    - view:     Muestra los detalles de un enlace (autor, fecha, comentarios, etc.).
    - add:      Agrega un nuevo enlace.
    - vote:     Vota un enlace. 
    - open:     Abre el enlace en el navegador.
    - comment:  Añade un comentario sobre un enlace
    '''
    print (helpmsg)


def view(args):
    """
    Comando para añadir ver detalles de los enlaces (propietario, fecha, comentarios, ...)
    """
    if (len(args)<1):
        print ("Error: Falta id del enlace")
        return
    try:
        number=int(args[0])
    except:
        print ("Error: Id incorrecto")
        return
    if ((number>0) and (number <= len(sorted_marks))):
        key=sorted_marks[number-1].key
        print ("%s"%sorted_marks[number-1].stringExtended())
    else:
        print ("Error: Id incorrecto")


def comment(args):
    """
    Comando para añadir comentarios a un enlace
    """    
    if (len(args)<1):
        print ("Error: Falta id del enlace")
        return
    try:
        number=int(args[0])
    except:
        print ("Error: Id incorrecto")
        return
    if ((number>0) and (number <= len(sorted_marks))):
        key=sorted_marks[number-1].key
        stamp=dt.timestamp(dt.today())
        print("Escribe tu comentario (max 500 palabras). Pulsa Ctrl-D para guardarlo.")
        lines = []
        while True:
            try:
                line = input()
            except EOFError:
                break
            lines.append(line)

        text="\\n".join(lines)
        if (len(text.strip())==0) or (len(text)>=MAX_COMMENT_SIZE):
            print ("\n\nError: El comentario no es válido. Es vacio o demasiado largo")
        else:
            addMark("%f;cmt;%s;%s" %(stamp,key,text))
            link=link_list[key]
            link.addComment(Comment(link,user,text))
    else:
        print ("Error: Id incorrecto")    



###
### Enlazado de funciones a comandos
###

cmd={}
cmd["add"]=add
cmd["list"]=listl
cmd["open"]=openbrowser
cmd["vote"]=vote
cmd["help"]=vhelp
cmd["view"]=view
cmd["comment"]=comment




###
###     Otras funciones auxiliares
###

def printMainPage():
    c=1
    for m in sorted_marks[:20]:
        print ("[%d] %s"%(c,m.stringHeader()),end="")
        c+=1

def loadGlobalLog():
    global sorted_marks
    dirs=os.listdir(USR_DIR)
    for d in dirs:
        if os.path.isfile(os.path.join(USR_DIR,d,OWL_LOGFILE)):
            user=d
            loadUserLog(d)
    sorted_marks=sorted(sorted_marks,key=lambda m:m.stamp,reverse=True)


def loadUserLog(userlog):
    global sorted_marks
    global link_list
    global log_errors
    nline=1

    with open(os.path.join(USR_DIR,userlog,OWL_LOGFILE),'r', encoding="utf-8") as f:
            lines=f.readlines()
    for l in lines:
        try:
            fields=l.strip("\n").split(";")
            if (len(fields)>2):
                if (fields[1] == "add"):
                    mark=Link(user,fields)
                    sorted_marks.append(mark)
                    link_list[mark.key]=mark

                if (fields[1] == "vote"):
                    key=fields[2]
                    link=link_list[key]
                    link.addVoteFrom(userlog)

                if (fields[1] == "open"):
                    key=fields[2]
                    link=link_list[key]
                    link.addViewer(userlog)   

                if (fields[1] == "cmt"):
                    key=fields[2]
                    link=link_list[key]
                    link.addComment(Comment(link,userlog,fields[3])) 
            nline+=1
        except:
            log_errors.append(userlog+":"+str(nline))


def addMark(marktext):
    filepath=os.path.join(USR_DIR,user,OWL_LOGFILE)
    with open(filepath,'a', encoding="utf-8") as f:
        f.write(marktext+"\n")    



class Comment:
    def __init__(self,link,user,text):
        self.link=link
        self.user=user
        self.text=text
        self.stamp=dt.timestamp(dt.today())
    
    def string(self):
        d=dt.fromtimestamp(float(self.stamp)).strftime("%d %b %Y %H:%M")
        return "* De %s en %s\n%s\n\n" % (self.user,d,self.text.replace("\\n","\n"))



class Link:
    def __init__(self,user, args):
        self.stamp=args[0]
        self.key=args[2]
        self.url=args[3]
        self.ups={}
        self.views={}
        self.comments=[]
        self.title="".join(args[4:]).strip("\n")
        self.user=user

    def stringHeader(self):
        prot="H"
        if (self.url.startswith("gemini://")):
            prot="G"
        ups=len(self.ups)
        cms=len(self.comments)
        if (user in self.views):
            return "[{0}|{1:>2} v|{2:>2} c] {3}\n".format(prot,ups,cms,self.title)
        else:
            return "[{0}|{1:>2} v|{2:>2} c] {3}{4}{5}\n".format(prot,ups,cms,fontStyle.BOLD,self.title,fontStyle.END)
            

    def stringExtended(self):
        d=dt.fromtimestamp(float(self.stamp)).strftime("%d %b %Y %H:%M")
        prot="HTTP"
        if (self.url.startswith("gemini://")):
            prot="GEM"
        ups=len(self.ups)
        cmts=""
        for c in self.comments:
            cmts+=c.string()

        return "%s\t- De %s el %s\n\t- Url: %s\n\n%s\n"%(self.stringHeader(),self.user,d,self.url,cmts)

    def addVoteFrom(self,user):
        self.ups[user]=1 

    def addViewer(self,user):
        self.views[user]=1

    def addComment(self,cmt):
        self.comments.append(cmt)


def loadConfigFile():
    global HTTP_BROWSER
    global GEMINI_BROWSER

    if (not os.path.isfile(os.path.join(userhome,OWL_CONFIGFILE))):
        return

    try:
        with open(os.path.join(userhome,OWL_CONFIGFILE)) as cfile:
            data = json.load(cfile)

            if data["http_browser"]:
                HTTP_BROWSER = data["http_browser"]

            if data["gemini_browser"]:
                GEMINI_BROWSER = data["gemini_browser"]
    except:
        print ("Error: El fichero de configuración contiene errores de sintaxis")



def printLogErrors():
    if (len(log_errors)>0):
        for e in log_errors:
            fields=e.split(":")
            if (fields[0] == user) and (len(fields)==2):
                print ("Detectado error en tu log. Línea "+fields[1])



if __name__=="__main__":
    loadGlobalLog()
    loadConfigFile()
    print (WELCOME_MESSAGE)
    print ("Version "+VERSION)
    printLogErrors()
    print ("Últimos enlaces publicados:\n")
    printMainPage()
    print()

    while(True):
        userline = str(input("owl> ")).strip()
        if (len(userline)>0):
            args=userline.split(" ")
            command=args[0]
            if (command=="quit"):
                sys.exit()
            if command in cmd:
                cmd[command](args[1:])
            else:
                print ("orden desconocida. Use help")