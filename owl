#!/usr/bin/python3
# -*- coding: utf-8 -*-


# proximo:
# - votar enlaces
# - marcar enlaces leidos
# - comentar enlaces


import sys
import os
from datetime import datetime as dt

OWL_LOGFILE="owl.log"
USR_DIR="users"
HTTP_BROWSER="w3m"
GEMINI_BROWSER="lagrange"

sorted_marks=[]
user=os.getenv("USER")

def add(args):
    stamp=dt.timestamp(dt.today())
    url=""
    title=""
    url=str(input("URL: ")).strip()
    title=str(input("TÃ­tulo: "))
    if (not url.startswith("http://")) and (not url.startswith("gemini://")):
        url="http://"+url
    filepath=os.path.join(USR_DIR,user,OWL_LOGFILE)
    with open(filepath,'a', encoding="utf-8") as f:
        f.write("%f;add;%s;%s\n" %(stamp,url,title))


def listl(args):
    c=1
    for m in sorted_marks:
        print ("[%d] %s"%(c,m.string()),end="")
        c+=1

def openbrowser(args):
    if (len(args)<1):
        print ("Faltan argumentos")
        return
    try:
        number=int(args[0])
    except:
        print ("Orden mal formada")
        return
    if (sorted_marks[number-1]):
        url = sorted_marks[number-1].url
        if url.startswith("gemini://"):
            os.system(GEMINI_BROWSER+" "+sorted_marks[number-1].url)
        else:
            os.system(HTTP_BROWSER+" "+sorted_marks[number-1].url)




def loadMarks():
    marks=[]
    dirs=os.listdir(USR_DIR)
    for d in dirs:
        if os.path.isfile(os.path.join(USR_DIR,d,OWL_LOGFILE)):
            user=d
            with open(os.path.join(USR_DIR,d,OWL_LOGFILE),'r', encoding="utf-8") as f:
                lines=f.readlines()
            for l in lines:
                if (len(l.strip("\n"))>0):
                    try:
                        mark=Logmark(user,l)
                        marks.append(mark)
                    except Exception as e:
                        print (e)

    # ordeno por fecha
    global sorted_marks
    sorted_marks=sorted(marks,key=lambda m:m.stamp)


class Logmark:
    def __init__(self,user, line):
        fields=line.split(";")
        if (len(fields)<4):
            raise Exception("Marca mal formada")

        self.stamp=fields[0]
        self.cmd=fields[1]
        self.url=fields[2]
        self.title="".join(fields[3:]).strip("\n")
        self.user=user

    def string(self):
        if (self.cmd=="add"):
            d=dt.fromtimestamp(float(self.stamp)).strftime("%d %b %Y %H:%M")
            prot="HTTP"
            if (self.url.startswith("gemini://")):
                prot="GEM"
            return "From %s (%s) [%s]\t%s\n"%(self.user,d,prot,self.title)



## binds
cmd={}
cmd["add"]=add
cmd["list"]=listl
cmd["open"]=openbrowser

if __name__=="__main__":
    loadMarks()
    #print (sorted_marks)
    while(True):
        userline = str(input("owl> ")).strip()
        if (len(userline)>0):
            args=userline.split(" ")
            command=args[0]
            if (command=="quit"):
                sys.exit()
            if command in cmd:
                cmd[command](args[1:])
            else:
                print ("unknow command")