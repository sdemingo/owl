#!/usr/bin/python3
# -*- coding: utf-8 -*-


# proximo:
# - votar enlaces
# - marcar enlaces leidos
# - comentar enlaces


import sys
import os
import hashlib
from datetime import datetime as dt

OWL_LOGFILE="owl.log"
USR_DIR="users"
HTTP_BROWSER="w3m"
GEMINI_BROWSER="amfora"

sorted_marks=[]
link_list={}
#user=os.getenv("USER")
user="a"

def add(args):
    stamp=dt.timestamp(dt.today())
    url=str(input("URL: ")).strip()
    title=str(input("TÃ­tulo: "))
    key=hashlib.md5(url.encode()).hexdigest()
    if (not url.startswith("http://")) and (not url.startswith("gemini://")):
        url="http://"+url
    line="%f;add;%s;%s;%s" %(stamp,key,url,title)
    addMark(line)



def listl(args):
    c=1
    for m in sorted_marks:
        print ("[%d] %s"%(c,m.string()),end="")
        c+=1

def openbrowser(args):
    if (len(args)<1):
        print ("Faltan argumentos")
        return
    try:
        number=int(args[0])
    except:
        print ("Orden mal formada")
        return
    if (sorted_marks[number-1]):
        url = sorted_marks[number-1].url
        if url.startswith("gemini://"):
            os.system(GEMINI_BROWSER+" "+sorted_marks[number-1].url)
        else:
            os.system(HTTP_BROWSER+" "+sorted_marks[number-1].url)

def vote(args):
    if (len(args)<1):
        print ("Faltan argumentos")
        return
    try:
        number=int(args[0])
    except:
        print ("Orden mal formada")
        return
    if (sorted_marks[number-1]):
        addMark("%f;vote;%s;%s" %(stamp,url,title))


def loadMarks():
    marks=[]
    global link_list

    dirs=os.listdir(USR_DIR)
    for d in dirs:
        if os.path.isfile(os.path.join(USR_DIR,d,OWL_LOGFILE)):
            user=d
            with open(os.path.join(USR_DIR,d,OWL_LOGFILE),'r', encoding="utf-8") as f:
                lines=f.readlines()
            for l in lines:
                fields=l.strip("\n").split(";")
                if (len(fields)>2):
                        if (fields[1] == "add"):
                            mark=LinkMark(user,fields)
                            marks.append(mark)
                            link_list[mark.key]=mark

                        if (fields[1] == "vote"):
                            key=fields[2]
                            if (key in link_list):
                                link_list[key].ups[user]=1

    # ordeno por fecha
    global sorted_marks
    sorted_marks=sorted(marks,key=lambda m:m.stamp)


def addMark(marktext):
    filepath=os.path.join(USR_DIR,user,OWL_LOGFILE)
    with open(filepath,'a', encoding="utf-8") as f:
        f.write(marktext+"\n")    


class LinkMark:
    def __init__(self,user, args):
        self.stamp=args[0]
        self.cmd=args[1]
        self.key=args[2]
        self.url=args[3]
        self.ups={}
        self.title="".join(args[4:]).strip("\n")
        self.user=user

    def string(self):
        d=dt.fromtimestamp(float(self.stamp)).strftime("%d %b %Y %H:%M")
        prot="HTTP"
        if (self.url.startswith("gemini://")):
            prot="GEM"
        ups=len(self.ups)
        return "From %s (%s) [%s:%d ups]\t%s\n"%(self.user,d,prot,ups,self.title)


## binds
cmd={}
cmd["add"]=add
cmd["list"]=listl
cmd["open"]=openbrowser
cmd["vote"]=vote

if __name__=="__main__":
    loadMarks()
    #print (sorted_marks)
    while(True):
        userline = str(input("owl> ")).strip()
        if (len(userline)>0):
            args=userline.split(" ")
            command=args[0]
            if (command=="quit"):
                sys.exit()
            if command in cmd:
                cmd[command](args[1:])
            else:
                print ("unknow command")